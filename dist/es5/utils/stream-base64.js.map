{"version":3,"file":"stream-base64.js","names":["Stream","require","StreamBase64","Duplex","constructor","pipes","write","cork","uncork","end","read","setEncoding","encoding","pause","resume","isPaused","pipe","destination","push","unpipe","filter","unshift","Error","wrap","module","exports"],"sources":["../../../lib/utils/stream-base64.js"],"sourcesContent":["const Stream = require('readable-stream');\r\n\r\n// =============================================================================\r\n// StreamBase64 - A utility to convert to/from base64 stream\r\n// Note: does not buffer data, must be piped\r\nclass StreamBase64 extends Stream.Duplex {\r\n  constructor() {\r\n    super();\r\n\r\n    // consuming pipe streams go here\r\n    this.pipes = [];\r\n  }\r\n\r\n  // writable\r\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\r\n  // finish - end() has been called\r\n  // pipe(src) - pipe() has been called on readable\r\n  // unpipe(src) - unpipe() has been called on readable\r\n  // error - duh\r\n\r\n  write(/* data, encoding */) {\r\n    return true;\r\n  }\r\n\r\n  cork() {}\r\n\r\n  uncork() {}\r\n\r\n  end(/* chunk, encoding, callback */) {}\r\n\r\n  // readable\r\n  // event readable - some data is now available\r\n  // event data - switch to flowing mode - feeds chunks to handler\r\n  // event end - no more data\r\n  // event close - optional, indicates upstream close\r\n  // event error - duh\r\n  read(/* size */) {}\r\n\r\n  setEncoding(encoding) {\r\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\r\n    this.encoding = encoding;\r\n  }\r\n\r\n  pause() {}\r\n\r\n  resume() {}\r\n\r\n  isPaused() {}\r\n\r\n  pipe(destination) {\r\n    // add destination to pipe list & write current buffer\r\n    this.pipes.push(destination);\r\n  }\r\n\r\n  unpipe(destination) {\r\n    // remove destination from pipe list\r\n    this.pipes = this.pipes.filter(pipe => pipe !== destination);\r\n  }\r\n\r\n  unshift(/* chunk */) {\r\n    // some numpty has read some data that's not for them and they want to put it back!\r\n    // Might implement this some day\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  wrap(/* stream */) {\r\n    // not implemented\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nmodule.exports = StreamBase64;\r\n"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEzC;AACA;AACA;AACA,MAAMC,YAAY,SAASF,MAAM,CAACG,MAAM,CAAC;EACvCC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;;IAEP;IACA,IAAI,CAACC,KAAK,GAAG,EAAE;EACjB;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEAC,KAAKA,CAAC;EAAA,EAAsB;IAC1B,OAAO,IAAI;EACb;EAEAC,IAAIA,CAAA,EAAG,CAAC;EAERC,MAAMA,CAAA,EAAG,CAAC;EAEVC,GAAGA,CAAC,iCAAiC,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACAC,IAAIA,CAAC,YAAY,CAAC;EAElBC,WAAWA,CAACC,QAAQ,EAAE;IACpB;IACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAC,KAAKA,CAAA,EAAG,CAAC;EAETC,MAAMA,CAAA,EAAG,CAAC;EAEVC,QAAQA,CAAA,EAAG,CAAC;EAEZC,IAAIA,CAACC,WAAW,EAAE;IAChB;IACA,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACD,WAAW,CAAC;EAC9B;EAEAE,MAAMA,CAACF,WAAW,EAAE;IAClB;IACA,IAAI,CAACZ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACe,MAAM,CAACJ,IAAI,IAAIA,IAAI,KAAKC,WAAW,CAAC;EAC9D;EAEAI,OAAOA,CAAC;EAAA,EAAa;IACnB;IACA;IACA,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEAC,IAAIA,CAAC;EAAA,EAAc;IACjB;IACA,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGvB,YAAY","ignoreList":[]}