{"version":3,"file":"pivot-table.js","names":["objectFromProps","range","toSortedArray","require","makePivotTable","worksheet","model","validate","sourceSheet","rows","columns","values","cacheFields","makeCacheFields","nameToIndex","reduce","result","cacheField","index","name","map","row","column","value","metric","cacheId","workbook","pivotTables","length","Error","headerNames","getRow","slice","isInHeaderNames","concat","fieldNamesWithSharedItems","names","nameToHasSharedItems","aggregate","columnIndex","columnValues","getColumn","splice","columnValuesAsSet","Set","sharedItems","push","module","exports"],"sources":["../../../lib/doc/pivot-table.js"],"sourcesContent":["const {objectFromProps, range, toSortedArray} = require('../utils/utils');\r\n\r\n// TK(2023-10-10): turn this into a class constructor.\r\n\r\nfunction makePivotTable(worksheet, model) {\r\n  // Example `model`:\r\n  // {\r\n  //   // Source of data: the entire sheet range is taken,\r\n  //   // akin to `worksheet1.getSheetValues()`.\r\n  //   sourceSheet: worksheet1,\r\n  //\r\n  //   // Pivot table fields: values indicate field names;\r\n  //   // they come from the first row in `worksheet1`.\r\n  //   rows: ['A', 'B'],\r\n  //   columns: ['C'],\r\n  //   values: ['E'], // only 1 item possible for now\r\n  //   metric: 'sum', // only 'sum' possible for now\r\n  // }\r\n\r\n  validate(worksheet, model);\r\n\r\n  const {sourceSheet} = model;\r\n  let {rows, columns, values} = model;\r\n\r\n  const cacheFields = makeCacheFields(sourceSheet, [...rows, ...columns]);\r\n\r\n  // let {rows, columns, values} use indices instead of names;\r\n  // names can then be accessed via `pivotTable.cacheFields[index].name`.\r\n  // *Note*: Using `reduce` as `Object.fromEntries` requires Node 12+;\r\n  // ExcelJS is >=8.3.0 (as of 2023-10-08).\r\n  const nameToIndex = cacheFields.reduce((result, cacheField, index) => {\r\n    result[cacheField.name] = index;\r\n    return result;\r\n  }, {});\r\n  rows = rows.map(row => nameToIndex[row]);\r\n  columns = columns.map(column => nameToIndex[column]);\r\n  values = values.map(value => nameToIndex[value]);\r\n\r\n  // form pivot table object\r\n  return {\r\n    sourceSheet,\r\n    rows,\r\n    columns,\r\n    values,\r\n    metric: 'sum',\r\n    cacheFields,\r\n    // defined in <pivotTableDefinition> of xl/pivotTables/pivotTable1.xml;\r\n    // also used in xl/workbook.xml\r\n    cacheId: '10',\r\n  };\r\n}\r\n\r\nfunction validate(worksheet, model) {\r\n  if (worksheet.workbook.pivotTables.length === 1) {\r\n    throw new Error(\r\n      'A pivot table was already added. At this time, ExcelJS supports at most one pivot table per file.'\r\n    );\r\n  }\r\n\r\n  if (model.metric && model.metric !== 'sum') {\r\n    throw new Error('Only the \"sum\" metric is supported at this time.');\r\n  }\r\n\r\n  const headerNames = model.sourceSheet.getRow(1).values.slice(1);\r\n  const isInHeaderNames = objectFromProps(headerNames, true);\r\n  for (const name of [...model.rows, ...model.columns, ...model.values]) {\r\n    if (!isInHeaderNames[name]) {\r\n      throw new Error(`The header name \"${name}\" was not found in ${model.sourceSheet.name}.`);\r\n    }\r\n  }\r\n\r\n  if (!model.rows.length) {\r\n    throw new Error('No pivot table rows specified.');\r\n  }\r\n\r\n  if (!model.columns.length) {\r\n    throw new Error('No pivot table columns specified.');\r\n  }\r\n\r\n  if (model.values.length !== 1) {\r\n    throw new Error('Exactly 1 value needs to be specified at this time.');\r\n  }\r\n}\r\n\r\nfunction makeCacheFields(worksheet, fieldNamesWithSharedItems) {\r\n  // Cache fields are used in pivot tables to reference source data.\r\n  //\r\n  // Example\r\n  // -------\r\n  // Turn\r\n  //\r\n  //  `worksheet` sheet values [\r\n  //    ['A', 'B', 'C', 'D', 'E'],\r\n  //    ['a1', 'b1', 'c1', 4, 5],\r\n  //    ['a1', 'b2', 'c1', 4, 5],\r\n  //    ['a2', 'b1', 'c2', 14, 24],\r\n  //    ['a2', 'b2', 'c2', 24, 35],\r\n  //    ['a3', 'b1', 'c3', 34, 45],\r\n  //    ['a3', 'b2', 'c3', 44, 45]\r\n  //  ];\r\n  //  fieldNamesWithSharedItems = ['A', 'B', 'C'];\r\n  //\r\n  // into\r\n  //\r\n  //  [\r\n  //    { name: 'A', sharedItems: ['a1', 'a2', 'a3'] },\r\n  //    { name: 'B', sharedItems: ['b1', 'b2'] },\r\n  //    { name: 'C', sharedItems: ['c1', 'c2', 'c3'] },\r\n  //    { name: 'D', sharedItems: null },\r\n  //    { name: 'E', sharedItems: null }\r\n  //  ]\r\n\r\n  const names = worksheet.getRow(1).values;\r\n  const nameToHasSharedItems = objectFromProps(fieldNamesWithSharedItems, true);\r\n\r\n  const aggregate = columnIndex => {\r\n    const columnValues = worksheet.getColumn(columnIndex).values.splice(2);\r\n    const columnValuesAsSet = new Set(columnValues);\r\n    return toSortedArray(columnValuesAsSet);\r\n  };\r\n\r\n  // make result\r\n  const result = [];\r\n  for (const columnIndex of range(1, names.length)) {\r\n    const name = names[columnIndex];\r\n    const sharedItems = nameToHasSharedItems[name] ? aggregate(columnIndex) : null;\r\n    result.push({name, sharedItems});\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = {makePivotTable};\r\n"],"mappings":"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","ignoreList":[]}