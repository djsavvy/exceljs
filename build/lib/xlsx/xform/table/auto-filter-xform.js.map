{"version":3,"file":"auto-filter-xform.js","names":["BaseXform","require","FilterColumnXform","AutoFilterXform","constructor","map","filterColumn","tag","prepare","model","columns","forEach","column","index","render","xmlStream","openNode","ref","autoFilterRef","closeNode","parseOpen","node","parser","name","attributes","Error","concat","JSON","stringify","parseText","text","parseClose","push","undefined","module","exports"],"sources":["../../../../../lib/xlsx/xform/table/auto-filter-xform.js"],"sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst FilterColumnXform = require('./filter-column-xform');\r\n\r\nclass AutoFilterXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      filterColumn: new FilterColumnXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'autoFilter';\r\n  }\r\n\r\n  prepare(model) {\r\n    model.columns.forEach((column, index) => {\r\n      this.map.filterColumn.prepare(column, {index});\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {ref: model.autoFilterRef});\r\n\r\n    model.columns.forEach(column => {\r\n      this.map.filterColumn.render(xmlStream, column);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n    return true;\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          autoFilterRef: node.attributes.ref,\r\n          columns: [],\r\n        };\r\n        return true;\r\n\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parseOpen(node);\r\n          return true;\r\n        }\r\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.columns.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AutoFilterXform;\r\n"],"mappings":";;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE1D,MAAME,eAAe,SAASH,SAAS,CAAC;EACtCI,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,GAAG,GAAG;MACTC,YAAY,EAAE,IAAIJ,iBAAiB,CAAC;IACtC,CAAC;EACH;EAEA,IAAIK,GAAGA,CAAA,EAAG;IACR,OAAO,YAAY;EACrB;EAEAC,OAAOA,CAACC,KAAK,EAAE;IACbA,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACvC,IAAI,CAACR,GAAG,CAACC,YAAY,CAACE,OAAO,CAACI,MAAM,EAAE;QAACC;MAAK,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAACC,SAAS,EAAEN,KAAK,EAAE;IACvBM,SAAS,CAACC,QAAQ,CAAC,IAAI,CAACT,GAAG,EAAE;MAACU,GAAG,EAAER,KAAK,CAACS;IAAa,CAAC,CAAC;IAExDT,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,MAAM,IAAI;MAC9B,IAAI,CAACP,GAAG,CAACC,YAAY,CAACQ,MAAM,CAACC,SAAS,EAAEH,MAAM,CAAC;IACjD,CAAC,CAAC;IAEFG,SAAS,CAACI,SAAS,CAAC,CAAC;IACrB,OAAO,IAAI;EACb;EAEAC,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAACC,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACF,SAAS,CAACC,IAAI,CAAC;MAC3B,OAAO,IAAI;IACb;IACA,QAAQA,IAAI,CAACE,IAAI;MACf,KAAK,IAAI,CAAChB,GAAG;QACX,IAAI,CAACE,KAAK,GAAG;UACXS,aAAa,EAAEG,IAAI,CAACG,UAAU,CAACP,GAAG;UAClCP,OAAO,EAAE;QACX,CAAC;QACD,OAAO,IAAI;MAEb;QACE,IAAI,CAACY,MAAM,GAAG,IAAI,CAACjB,GAAG,CAACgB,IAAI,CAACE,IAAI,CAAC;QACjC,IAAI,IAAI,CAACD,MAAM,EAAE;UACf,IAAI,CAACF,SAAS,CAACC,IAAI,CAAC;UACpB,OAAO,IAAI;QACb;QACA,MAAM,IAAII,KAAK,sCAAAC,MAAA,CAAsCC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAE,CAAC;IAChF;EACF;EAEAQ,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,IAAI,CAACR,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACO,SAAS,CAACC,IAAI,CAAC;IAC7B;EACF;EAEAC,UAAUA,CAACR,IAAI,EAAE;IACf,IAAI,IAAI,CAACD,MAAM,EAAE;MACf,IAAI,CAAC,IAAI,CAACA,MAAM,CAACS,UAAU,CAACR,IAAI,CAAC,EAAE;QACjC,IAAI,CAACd,KAAK,CAACC,OAAO,CAACsB,IAAI,CAAC,IAAI,CAACV,MAAM,CAACb,KAAK,CAAC;QAC1C,IAAI,CAACa,MAAM,GAAGW,SAAS;MACzB;MACA,OAAO,IAAI;IACb;IACA,QAAQV,IAAI;MACV,KAAK,IAAI,CAAChB,GAAG;QACX,OAAO,KAAK;MACd;QACE,MAAM,IAAIkB,KAAK,uCAAAC,MAAA,CAAuCH,IAAI,CAAE,CAAC;IACjE;EACF;AACF;AAEAW,MAAM,CAACC,OAAO,GAAGhC,eAAe","ignoreList":[]}