{"version":3,"file":"vml-textbox-xform.js","names":["BaseXform","require","VmlTextboxXform","tag","conversionUnit","value","multiple","unit","concat","parseFloat","toFixed","reverseConversionUnit","inset","split","map","margin","Number","render","xmlStream","model","attributes","style","note","margins","Array","isArray","join","openNode","leafNode","closeNode","parseOpen","node","name","parseText","parseClose","module","exports"],"sources":["../../../../../lib/xlsx/xform/comment/vml-textbox-xform.js"],"sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass VmlTextboxXform extends BaseXform {\r\n  get tag() {\r\n    return 'v:textbox';\r\n  }\r\n\r\n  conversionUnit(value, multiple, unit) {\r\n    return `${parseFloat(value) * multiple.toFixed(2)}${unit}`;\r\n  }\r\n\r\n  reverseConversionUnit(inset) {\r\n    return (inset || '').split(',').map(margin => {\r\n      return Number(parseFloat(this.conversionUnit(parseFloat(margin), 0.1, '')).toFixed(2));\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const attributes = {\r\n      style: 'mso-direction-alt:auto',\r\n    };\r\n    if (model && model.note) {\r\n      let {inset} = model.note && model.note.margins;\r\n      if (Array.isArray(inset)) {\r\n        inset = inset\r\n          .map(margin => {\r\n            return this.conversionUnit(margin, 10, 'mm');\r\n          })\r\n          .join(',');\r\n      }\r\n      if (inset) {\r\n        attributes.inset = inset;\r\n      }\r\n    }\r\n    xmlStream.openNode('v:textbox', attributes);\r\n    xmlStream.leafNode('div', {style: 'text-align:left'});\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          inset: this.reverseConversionUnit(node.attributes.inset),\r\n        };\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = VmlTextboxXform;\r\n"],"mappings":";;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1C,MAAMC,eAAe,SAASF,SAAS,CAAC;EACtC,IAAIG,GAAGA,CAAA,EAAG;IACR,OAAO,WAAW;EACpB;EAEAC,cAAcA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IACpC,UAAAC,MAAA,CAAUC,UAAU,CAACJ,KAAK,CAAC,GAAGC,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,EAAAF,MAAA,CAAGD,IAAI;EAC1D;EAEAI,qBAAqBA,CAACC,KAAK,EAAE;IAC3B,OAAO,CAACA,KAAK,IAAI,EAAE,EAAEC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,IAAI;MAC5C,OAAOC,MAAM,CAACP,UAAU,CAAC,IAAI,CAACL,cAAc,CAACK,UAAU,CAACM,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC,CAAC;EACJ;EAEAO,MAAMA,CAACC,SAAS,EAAEC,KAAK,EAAE;IACvB,MAAMC,UAAU,GAAG;MACjBC,KAAK,EAAE;IACT,CAAC;IACD,IAAIF,KAAK,IAAIA,KAAK,CAACG,IAAI,EAAE;MACvB,IAAI;QAACV;MAAK,CAAC,GAAGO,KAAK,CAACG,IAAI,IAAIH,KAAK,CAACG,IAAI,CAACC,OAAO;MAC9C,IAAIC,KAAK,CAACC,OAAO,CAACb,KAAK,CAAC,EAAE;QACxBA,KAAK,GAAGA,KAAK,CACVE,GAAG,CAACC,MAAM,IAAI;UACb,OAAO,IAAI,CAACX,cAAc,CAACW,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC;QAC9C,CAAC,CAAC,CACDW,IAAI,CAAC,GAAG,CAAC;MACd;MACA,IAAId,KAAK,EAAE;QACTQ,UAAU,CAACR,KAAK,GAAGA,KAAK;MAC1B;IACF;IACAM,SAAS,CAACS,QAAQ,CAAC,WAAW,EAAEP,UAAU,CAAC;IAC3CF,SAAS,CAACU,QAAQ,CAAC,KAAK,EAAE;MAACP,KAAK,EAAE;IAAiB,CAAC,CAAC;IACrDH,SAAS,CAACW,SAAS,CAAC,CAAC;EACvB;EAEAC,SAASA,CAACC,IAAI,EAAE;IACd,QAAQA,IAAI,CAACC,IAAI;MACf,KAAK,IAAI,CAAC7B,GAAG;QACX,IAAI,CAACgB,KAAK,GAAG;UACXP,KAAK,EAAE,IAAI,CAACD,qBAAqB,CAACoB,IAAI,CAACX,UAAU,CAACR,KAAK;QACzD,CAAC;QACD,OAAO,IAAI;MACb;QACE,OAAO,IAAI;IACf;EACF;EAEAqB,SAASA,CAAA,EAAG,CAAC;EAEbC,UAAUA,CAACF,IAAI,EAAE;IACf,QAAQA,IAAI;MACV,KAAK,IAAI,CAAC7B,GAAG;QACX,OAAO,KAAK;MACd;QACE,OAAO,IAAI;IACf;EACF;AACF;AAEAgC,MAAM,CAACC,OAAO,GAAGlC,eAAe","ignoreList":[]}